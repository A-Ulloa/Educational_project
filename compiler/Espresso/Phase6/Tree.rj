.class public Tree
.super java/lang/Object

.field public value I

.field public left LTree;

.field public right LTree;

.method public <init>()V
	.limit stack 50
	.limit locals 1
;  (18) Constructor Declaration
;  (0) Explicit Constructor Invocation
	aload_0
	invokespecial java/lang/Object/<init>()V
;  (0) End CInvocation
;  (18) Field Init Generation Start
;  (18) Field Init Generation End
	return
.end method

.method public <init>(I)V
	.limit stack 50
	.limit locals 2
;  (19) Constructor Declaration
;  (0) Explicit Constructor Invocation
	aload_0
	invokespecial java/lang/Object/<init>()V
;  (0) End CInvocation
;  (19) Field Init Generation Start
;  (19) Field Init Generation End
;  (20) Expression Statement
;  (20) Assignment
;  (20) This
	aload_0
;  (20) End This
;  (20) Name Expression --
	iload_1
;  (20) End NameExpr
	putfield Tree/value I
;  (20) End Assignment
;  (20) End ExprStat
;  (21) Expression Statement
;  (21) Assignment
;  (21) This
	aload_0
;  (21) End This
;  (21) Assignment
;  (21) This
	aload_0
;  (21) End This
;  (21) Literal
	aconst_null
;  (21) End Literal
	dup_x1
	putfield Tree/right LTree;
;  (21) End Assignment
	putfield Tree/left LTree;
;  (21) End Assignment
;  (21) End ExprStat
	return
.end method

.method public insert(I)LTree;
	.limit stack 50
	.limit locals 2
;  (24) Method Declaration (insert)
;  (25) If Statement
;  (25) Binary Expression
;  (25) Field Reference
;  (25) This
	aload_0
;  (25) End This
	getfield Tree/value I
;  (25) End FieldRef
;  (25) Name Expression --
	iload_1
;  (25) End NameExpr
	if_icmplt L3
	iconst_0
	goto L4
L3:
	iconst_1
L4:
;  (25) End BinaryExpr
	ifeq L1
;  (26) If Statement
;  (26) Binary Expression
;  (26) Field Reference
;  (26) This
	aload_0
;  (26) End This
	getfield Tree/right LTree;
;  (26) End FieldRef
;  (26) Literal
	aconst_null
;  (26) End Literal
	if_acmpeq L7
	iconst_0
	goto L8
L7:
	iconst_1
L8:
;  (26) End BinaryExpr
	ifeq L5
;  (27) Expression Statement
;  (27) Assignment
;  (27) This
	aload_0
;  (27) End This
;  (27) New
	new Tree
	dup
;  (27) Name Expression --
	iload_1
;  (27) End NameExpr
	invokespecial Tree/<init>(I)V
;  (27) End New
	putfield Tree/right LTree;
;  (27) End Assignment
;  (27) End ExprStat
	goto L6
L5:
;  (29) Expression Statement
;  (29) Assignment
;  (29) This
	aload_0
;  (29) End This
;  (29) Invocation
;  (29) Field Reference
;  (29) This
	aload_0
;  (29) End This
	getfield Tree/right LTree;
;  (29) End FieldRef
;  (29) Name Expression --
	iload_1
;  (29) End NameExpr
	invokevirtual Tree/insert(I)LTree;
;  (29) End Invocation
	putfield Tree/right LTree;
;  (29) End Assignment
;  (29) End ExprStat
L6:
;  (26) End IfStat
	goto L2
L1:
;  (30) If Statement
;  (30) Binary Expression
;  (30) Field Reference
;  (30) This
	aload_0
;  (30) End This
	getfield Tree/value I
;  (30) End FieldRef
;  (30) Name Expression --
	iload_1
;  (30) End NameExpr
	if_icmpgt L10
	iconst_0
	goto L11
L10:
	iconst_1
L11:
;  (30) End BinaryExpr
	ifeq L9
;  (31) If Statement
;  (31) Binary Expression
;  (31) Field Reference
;  (31) This
	aload_0
;  (31) End This
	getfield Tree/left LTree;
;  (31) End FieldRef
;  (31) Literal
	aconst_null
;  (31) End Literal
	if_acmpeq L14
	iconst_0
	goto L15
L14:
	iconst_1
L15:
;  (31) End BinaryExpr
	ifeq L12
;  (32) Expression Statement
;  (32) Assignment
;  (32) This
	aload_0
;  (32) End This
;  (32) New
	new Tree
	dup
;  (32) Name Expression --
	iload_1
;  (32) End NameExpr
	invokespecial Tree/<init>(I)V
;  (32) End New
	putfield Tree/left LTree;
;  (32) End Assignment
;  (32) End ExprStat
	goto L13
L12:
;  (34) Expression Statement
;  (34) Assignment
;  (34) This
	aload_0
;  (34) End This
;  (34) Invocation
;  (34) Field Reference
;  (34) This
	aload_0
;  (34) End This
	getfield Tree/left LTree;
;  (34) End FieldRef
;  (34) Name Expression --
	iload_1
;  (34) End NameExpr
	invokevirtual Tree/insert(I)LTree;
;  (34) End Invocation
	putfield Tree/left LTree;
;  (34) End Assignment
;  (34) End ExprStat
L13:
;  (31) End IfStat
L9:
;  (30) End IfStat
L2:
;  (25) End IfStat
;  (36) Return Statement
;  (36) This
	aload_0
;  (36) End This
	areturn
;  (36) End ReturnStat
.end method

.method public traverse()V
	.limit stack 50
	.limit locals 1
;  (39) Method Declaration (traverse)
;  (40) If Statement
;  (40) Binary Expression
;  (40) Field Reference
;  (40) This
	aload_0
;  (40) End This
	getfield Tree/left LTree;
;  (40) End FieldRef
;  (40) Literal
	aconst_null
;  (40) End Literal
	if_acmpne L17
	iconst_0
	goto L18
L17:
	iconst_1
L18:
;  (40) End BinaryExpr
	ifeq L16
;  (41) Expression Statement
;  (41) Invocation
;  (41) Field Reference
;  (41) This
	aload_0
;  (41) End This
	getfield Tree/left LTree;
;  (41) End FieldRef
	invokevirtual Tree/traverse()V
;  (41) End Invocation
;  (41) End ExprStat
L16:
;  (40) End IfStat
;  (42) Expression Statement
;  (42) Invocation
;  (42) Field Reference
;  (42) Name Expression --
;  (42) End NameExpr
	getstatic System/out LIo;
;  (42) End FieldRef
	pop
;  (42) Field Reference
;  (42) This
	aload_0
;  (42) End This
	getfield Tree/value I
;  (42) End FieldRef
	invokestatic Io/println(I)V
;  (42) End Invocation
;  (42) End ExprStat
;  (43) If Statement
;  (43) Binary Expression
;  (43) Field Reference
;  (43) This
	aload_0
;  (43) End This
	getfield Tree/right LTree;
;  (43) End FieldRef
;  (43) Literal
	aconst_null
;  (43) End Literal
	if_acmpne L20
	iconst_0
	goto L21
L20:
	iconst_1
L21:
;  (43) End BinaryExpr
	ifeq L19
;  (44) Expression Statement
;  (44) Invocation
;  (44) Field Reference
;  (44) This
	aload_0
;  (44) End This
	getfield Tree/right LTree;
;  (44) End FieldRef
	invokevirtual Tree/traverse()V
;  (44) End Invocation
;  (44) End ExprStat
L19:
;  (43) End IfStat
	return
.end method

